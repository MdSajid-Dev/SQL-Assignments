/* Sales */

use assignments;

CREATE TABLE Sales (
    sale_id INT PRIMARY KEY,
    product_id INT,
    quantity_sold INT,
    sale_date DATE,
    total_price DECIMAL(10, 2),
    FOREIGN KEY (product_id) REFERENCES Products(product_id) 
);

INSERT INTO Sales (sale_id, product_id, quantity_sold, sale_date, total_price) VALUES
(1, 101, 5, '2024-01-01', 2500.00),
(2, 102, 3, '2024-01-02', 900.00),
(3, 103, 2, '2024-01-02', 60.00),
(4, 104, 4, '2024-01-03', 80.00),
(5, 105, 6, '2024-01-03', 90.00);

-- 1. Retrieve all columns from the Sales table.

select * from Sales;

-- 2. Retrieve the sale_id and sale_date from the Sales table.

select sale_id, sale_date from Sales;

-- 3. Filter the Sales table to show only sales with a total_price greater than $100.

select * from Sales where total_price > 100;

-- 4. Retrieve the sale_id and total_price from the Sales table for sales made on January 3, 2024.

select sale_id, total_price from Sales where sale_date = '2024-01-03';

-- 5. Calculate the total revenue generated from all sales in the Sales table.

select sum(total_price) as Total_Revenue from sales;

-- 6. Calculate the total quantity_sold from the Sales table.

select sum(quantity_sold) as Total_Quantity from sales;

-- 7. Retrieve the sale_id, product_id, and total_price from the Sales table for sales with a quantity_sold greater than 4.

select sale_id, product_id, total_price from Sales where quantity_sold > 4;

-- 8. Â Calculate the average total_price of sales in the Sales table.

select avg(total_price) as Average_Sales from Sales;
